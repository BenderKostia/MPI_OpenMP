#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

// Функція для ініціалізації матриць випадковими значеннями
void initializeMatrix(vector<vector<double>>& matrix, int N) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            matrix[i][j] = rand() % 10;  // Значення від 0 до 9
        }
    }
}

// Функція для множення двох матриць
void multiplyMatrixBlocks(
    const vector<vector<double>>& A,
    const vector<vector<double>>& B,
    vector<vector<double>>& C,
    int blockSize,
    int blockRow,
    int blockCol,
    int N) {

    for (int i = 0; i < blockSize; ++i) {
        for (int j = 0; j < blockSize; ++j) {
            double sum = 0.0;
            for (int k = 0; k < N; ++k) {
                sum += A[blockRow * blockSize + i][k] * B[k][blockCol * blockSize + j];
            }
            C[blockRow * blockSize + i][blockCol * blockSize + j] += sum;
        }
    }
}

int main() {
    const int N = 3000;  // Повний розмір матриць
    const int sqrtP = omp_get_max_threads(); // Вважаємо, що кількість потоків є квадратним числом
    const int blockSize = N / sqrtP; // Розмір блоку

    srand(static_cast<unsigned int>(time(nullptr))); // Ініціалізація генератора випадкових чисел

    vector<vector<double>> A(N, vector<double>(N));
    vector<vector<double>> B(N, vector<double>(N));
    vector<vector<double>> C(N, vector<double>(N, 0.0));

    initializeMatrix(A, N);
    initializeMatrix(B, N);

    double startTime = omp_get_wtime();

    // Паралельний блочний алгоритм множення матриць за алгоритмом Фокса
#pragma omp parallel shared(A, B, C)
    {
        int thread_id = omp_get_thread_num();
        int blockRow = thread_id / sqrtP;
        int blockCol = thread_id % sqrtP;

        for (int stage = 0; stage < sqrtP; ++stage) {
            int root = (blockRow + stage) % sqrtP;
            multiplyMatrixBlocks(A, B, C, blockSize, blockRow, root, N);
        }
    }

    double endTime = omp_get_wtime();

    cout << "Execution Time: " << endTime - startTime << " seconds." << endl;

    return 0;
}
